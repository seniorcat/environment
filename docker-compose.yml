version: "3.7"
services:
    ## COMMON
    db:
        image: postgres:12.0-alpine
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_DATABASE}
    ## SITE
    nginx:
        image: nginx:1.17-alpine
        container_name: travellist-nginx
        restart: unless-stopped
        ports:
            - 8000:80
        volumes:
            - ${PROJECT_PATH}:/var/www
            - ./nginx:/etc/nginx/conf.d
        networks:
            - varsoma

    php:
        build:
            args:
                user: sammy
                uid: 1000
            context: ./php
            dockerfile: Dockerfile
        image: php
        container_name: php
        restart: unless-stopped
        working_dir: /var/www/
        volumes:
            - ${PROJECT_PATH}:/var/www
        networks:
            - varsoma
    ## SERVICES
    goparser:
        build:
            context: ./go
            dockerfile: Dockerfile
        image: goparser
        container_name: goparser
        restart: unless-stopped
        volumes:
            - ./go/awesomeParser:/usr/bin/parser
        networks:
            - varsoma
    ## LOGS AND METRICS
    elasticsearch:
        build:
            context: ./elk
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - ./elk/config/elasticsearch.yml:/usr/share/elk/config/elasticsearch.yml
            - ./elk-data:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
            - "9300:9300"
        environment:
            ES_JAVA_OPTS: "-Xmx256m -Xms256m"
            ELASTIC_PASSWORD: changeme
            discovery.type: single-node
        networks:
            - varsoma

    prometheus:
        image: prom/prometheus:v2.1.0
        volumes:
        - ./prometheus/:/etc/prometheus/
        - prometheus_data:/prometheus
        command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/usr/share/prometheus/console_libraries'
        - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
        - 9090:9090
        links:
        - cadvisor:cadvisor
        - alertmanager:alertmanager
    #      - pushgateway:pushgateway
        depends_on:
        - cadvisor
    #      - pushgateway
        networks:
        - varsoma
        restart: always
    #    deploy:
    #      placement:
    #        constraints:
    #          - node.hostname == ${HOSTNAME}

    node-exporter:
        image: prom/node-exporter
        volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
        command: 
        - '--path.procfs=/host/proc' 
        - '--path.sysfs=/host/sys'
        - --collector.filesystem.ignored-mount-points
        - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
        ports:
        - 9100:9100
        networks:
        - varsoma
        restart: always
        deploy:
            mode: global

    alertmanager:
        image: prom/alertmanager
        ports:
        - 9093:9093
        volumes:
        - ./alertmanager/:/etc/alertmanager/
        networks:
        - varsoma
        restart: always
        command:
        - '--config.file=/etc/alertmanager/config.yml'
        - '--storage.path=/alertmanager'
    #    deploy:
    #      placement:
    #        constraints:
    #          - node.hostname == ${HOSTNAME}
    cadvisor:
        image: google/cadvisor
        volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        ports:
        - 8080:8080
        networks:
        - varsoma
        restart: always
        deploy:
            mode: global

    grafana:
        image: grafana/grafana
        user: "472"
        depends_on:
        - prometheus
        ports:
        - 3000:3000
        volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/provisioning/:/etc/grafana/provisioning/
        env_file:
        - ./grafana/config.monitoring
        networks:
        - varsoma
        restart: always

#  pushgateway:
#    image: prom/pushgateway
#    restart: always
#    expose:
#      - 9091
#    ports:
#      - "9091:9091"
#    networks:
#      - varsoma

    kibana:
        build:
            context: kibana/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
        ports:
            - "5601:5601"
        networks:
            - varsoma
        depends_on:
            - elasticsearch

    logstash:
        build:
            context: logstash/
            args:
                ELK_VERSION: $ELK_VERSION
        volumes:
            - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./logstash/pipeline:/usr/share/logstash/pipeline
        ports:
            - "5000:5000/tcp"
            - "5000:5000/udp"
            - "9600:9600"
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - varsoma
        depends_on:
            - elasticsearch

volumes:
    postgres_data: {}
    prometheus_data: {}
    grafana_data: {}
    elk_data: {}
networks:
    varsoma:
        driver: bridge
